/* tslint:disable */
/* eslint-disable */
/**
 * Corbado Frontend API
 * Overview of all Corbado Frontend API calls to implement passwordless authentication.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@corbado.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { EmptyReq } from '../models';
// @ts-ignore
import { ErrorRsp } from '../models';
// @ts-ignore
import { LogoutRsp } from '../models';
// @ts-ignore
import { SessionRefreshRsp } from '../models';
// @ts-ignore
import { WellKnownJWKSListRsp } from '../models';
/**
 * SessionsApi - axios parameter creator
 * @export
 */
export const SessionsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Performs session logout
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sessionLogout: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/sessions/logout`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication projectID required
            await setApiKeyToObject(localVarHeaderParameter, "X-Corbado-ProjectID", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Performs session refresh
         * @param {EmptyReq} emptyReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sessionRefresh: async (emptyReq: EmptyReq, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'emptyReq' is not null or undefined
            assertParamExists('sessionRefresh', 'emptyReq', emptyReq)
            const localVarPath = `/v1/sessions/refresh`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication projectID required
            await setApiKeyToObject(localVarHeaderParameter, "X-Corbado-ProjectID", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(emptyReq, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves well-known JWKS for Project ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        wellKnownJWKSList: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/.well-known/jwks`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication projectID required
            await setApiKeyToObject(localVarHeaderParameter, "X-Corbado-ProjectID", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SessionsApi - functional programming interface
 * @export
 */
export const SessionsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SessionsApiAxiosParamCreator(configuration)
    return {
        /**
         * Performs session logout
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sessionLogout(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LogoutRsp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.sessionLogout(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Performs session refresh
         * @param {EmptyReq} emptyReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sessionRefresh(emptyReq: EmptyReq, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SessionRefreshRsp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.sessionRefresh(emptyReq, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves well-known JWKS for Project ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async wellKnownJWKSList(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WellKnownJWKSListRsp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.wellKnownJWKSList(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * SessionsApi - factory interface
 * @export
 */
export const SessionsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SessionsApiFp(configuration)
    return {
        /**
         * Performs session logout
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sessionLogout(options?: any): AxiosPromise<LogoutRsp> {
            return localVarFp.sessionLogout(options).then((request) => request(axios, basePath));
        },
        /**
         * Performs session refresh
         * @param {EmptyReq} emptyReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sessionRefresh(emptyReq: EmptyReq, options?: any): AxiosPromise<SessionRefreshRsp> {
            return localVarFp.sessionRefresh(emptyReq, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves well-known JWKS for Project ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        wellKnownJWKSList(options?: any): AxiosPromise<WellKnownJWKSListRsp> {
            return localVarFp.wellKnownJWKSList(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SessionsApi - object-oriented interface
 * @export
 * @class SessionsApi
 * @extends {BaseAPI}
 */
export class SessionsApi extends BaseAPI {
    /**
     * Performs session logout
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SessionsApi
     */
    public sessionLogout(options?: AxiosRequestConfig) {
        return SessionsApiFp(this.configuration).sessionLogout(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Performs session refresh
     * @param {EmptyReq} emptyReq 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SessionsApi
     */
    public sessionRefresh(emptyReq: EmptyReq, options?: AxiosRequestConfig) {
        return SessionsApiFp(this.configuration).sessionRefresh(emptyReq, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves well-known JWKS for Project ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SessionsApi
     */
    public wellKnownJWKSList(options?: AxiosRequestConfig) {
        return SessionsApiFp(this.configuration).wellKnownJWKSList(options).then((request) => request(this.axios, this.basePath));
    }
}

