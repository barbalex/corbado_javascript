/* tslint:disable */
/* eslint-disable */
/**
 * Corbado Frontend API
 * Overview of all Corbado Frontend API calls to implement passwordless authentication.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@corbado.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { AuthMethodsListReq } from '../models';
// @ts-ignore
import { AuthMethodsListRsp } from '../models';
// @ts-ignore
import { EmailCodeConfirmReq } from '../models';
// @ts-ignore
import { EmailCodeConfirmRsp } from '../models';
// @ts-ignore
import { EmailCodeLoginStartReq } from '../models';
// @ts-ignore
import { EmailCodeLoginStartRsp } from '../models';
// @ts-ignore
import { EmailCodeRegisterStartReq } from '../models';
// @ts-ignore
import { EmailCodeRegisterStartRsp } from '../models';
// @ts-ignore
import { EmailCodeStatusReq } from '../models';
// @ts-ignore
import { EmailCodeStatusRsp } from '../models';
// @ts-ignore
import { EmailLinkConfirmReq } from '../models';
// @ts-ignore
import { EmailLinkConfirmRsp } from '../models';
// @ts-ignore
import { EmailLinkLoginStartReq } from '../models';
// @ts-ignore
import { EmailLinkLoginStartRsp } from '../models';
// @ts-ignore
import { EmailLinkRegisterStartReq } from '../models';
// @ts-ignore
import { EmailLinkRegisterStartRsp } from '../models';
// @ts-ignore
import { EmailLinkStatusReq } from '../models';
// @ts-ignore
import { EmailLinkStatusRsp } from '../models';
// @ts-ignore
import { EmptyReq } from '../models';
// @ts-ignore
import { ErrorRsp } from '../models';
// @ts-ignore
import { GenericRsp } from '../models';
// @ts-ignore
import { LoginTokenReq } from '../models';
// @ts-ignore
import { LoginTokenRsp } from '../models';
// @ts-ignore
import { MePassKeyRsp } from '../models';
// @ts-ignore
import { MeRsp } from '../models';
// @ts-ignore
import { PassKeyAppendFinishRsp } from '../models';
// @ts-ignore
import { PassKeyAssociateStartReq } from '../models';
// @ts-ignore
import { PassKeyCredentialExistsReq } from '../models';
// @ts-ignore
import { PassKeyCredentialExistsRsp } from '../models';
// @ts-ignore
import { PassKeyFinishReq } from '../models';
// @ts-ignore
import { PassKeyLoginFinishRsp } from '../models';
// @ts-ignore
import { PassKeyLoginStartReq } from '../models';
// @ts-ignore
import { PassKeyMediationStartReq } from '../models';
// @ts-ignore
import { PassKeyMediationStartRsp } from '../models';
// @ts-ignore
import { PassKeyRegisterFinishRsp } from '../models';
// @ts-ignore
import { PassKeyRegisterStartReq } from '../models';
// @ts-ignore
import { PassKeyStartRsp } from '../models';
// @ts-ignore
import { PasswordVerifyReq } from '../models';
// @ts-ignore
import { PasswordVerifyRsp } from '../models';
/**
 * UsersApi - axios parameter creator
 * @export
 */
export const UsersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Lists user\'s available authentication methods
         * @param {AuthMethodsListReq} authMethodsListReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authMethodsList: async (authMethodsListReq: AuthMethodsListReq, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authMethodsListReq' is not null or undefined
            assertParamExists('authMethodsList', 'authMethodsListReq', authMethodsListReq)
            const localVarPath = `/v1/users/authmethods`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication projectID required
            await setApiKeyToObject(localVarHeaderParameter, "X-Corbado-ProjectID", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(authMethodsListReq, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Gets current user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        currentUserGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/me`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication projectID required
            await setApiKeyToObject(localVarHeaderParameter, "X-Corbado-ProjectID", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete current user\'s passkeys
         * @param {string} credentialID Credential ID from passkeys
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        currentUserPassKeyDelete: async (credentialID: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'credentialID' is not null or undefined
            assertParamExists('currentUserPassKeyDelete', 'credentialID', credentialID)
            const localVarPath = `/v1/me/passkeys/{credentialID}`
                .replace(`{${"credentialID"}}`, encodeURIComponent(String(credentialID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication projectID required
            await setApiKeyToObject(localVarHeaderParameter, "X-Corbado-ProjectID", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Gets current user\'s passkeys
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        currentUserPassKeyGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/me/passkeys`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication projectID required
            await setApiKeyToObject(localVarHeaderParameter, "X-Corbado-ProjectID", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Performs email OTP register confirm
         * @param {EmailCodeConfirmReq} emailCodeConfirmReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        emailCodeConfirm: async (emailCodeConfirmReq: EmailCodeConfirmReq, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'emailCodeConfirmReq' is not null or undefined
            assertParamExists('emailCodeConfirm', 'emailCodeConfirmReq', emailCodeConfirmReq)
            const localVarPath = `/v1/users/emailcodes/confirm`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication projectID required
            await setApiKeyToObject(localVarHeaderParameter, "X-Corbado-ProjectID", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(emailCodeConfirmReq, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Performs email OTP login start
         * @param {EmailCodeLoginStartReq} emailCodeLoginStartReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        emailCodeLoginStart: async (emailCodeLoginStartReq: EmailCodeLoginStartReq, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'emailCodeLoginStartReq' is not null or undefined
            assertParamExists('emailCodeLoginStart', 'emailCodeLoginStartReq', emailCodeLoginStartReq)
            const localVarPath = `/v1/users/emailcodes/login/start`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication projectID required
            await setApiKeyToObject(localVarHeaderParameter, "X-Corbado-ProjectID", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(emailCodeLoginStartReq, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Performs email OTP register start
         * @param {EmailCodeRegisterStartReq} emailCodeRegisterStartReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        emailCodeRegisterStart: async (emailCodeRegisterStartReq: EmailCodeRegisterStartReq, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'emailCodeRegisterStartReq' is not null or undefined
            assertParamExists('emailCodeRegisterStart', 'emailCodeRegisterStartReq', emailCodeRegisterStartReq)
            const localVarPath = `/v1/users/emailcodes/register/start`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication projectID required
            await setApiKeyToObject(localVarHeaderParameter, "X-Corbado-ProjectID", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(emailCodeRegisterStartReq, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Performs email OTP login status check
         * @param {EmailCodeStatusReq} emailCodeStatusReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        emailCodeStatus: async (emailCodeStatusReq: EmailCodeStatusReq, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'emailCodeStatusReq' is not null or undefined
            assertParamExists('emailCodeStatus', 'emailCodeStatusReq', emailCodeStatusReq)
            const localVarPath = `/v1/users/emailcodes/status`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication projectID required
            await setApiKeyToObject(localVarHeaderParameter, "X-Corbado-ProjectID", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(emailCodeStatusReq, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Performs email link register confirm
         * @param {EmailLinkConfirmReq} emailLinkConfirmReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        emailLinkConfirm: async (emailLinkConfirmReq: EmailLinkConfirmReq, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'emailLinkConfirmReq' is not null or undefined
            assertParamExists('emailLinkConfirm', 'emailLinkConfirmReq', emailLinkConfirmReq)
            const localVarPath = `/v1/users/emaillinks/confirm`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication projectID required
            await setApiKeyToObject(localVarHeaderParameter, "X-Corbado-ProjectID", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(emailLinkConfirmReq, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Performs email link login start
         * @param {EmailLinkLoginStartReq} emailLinkLoginStartReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        emailLinkLoginStart: async (emailLinkLoginStartReq: EmailLinkLoginStartReq, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'emailLinkLoginStartReq' is not null or undefined
            assertParamExists('emailLinkLoginStart', 'emailLinkLoginStartReq', emailLinkLoginStartReq)
            const localVarPath = `/v1/users/emaillinks/login/start`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication projectID required
            await setApiKeyToObject(localVarHeaderParameter, "X-Corbado-ProjectID", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(emailLinkLoginStartReq, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Performs email link register start
         * @param {EmailLinkRegisterStartReq} emailLinkRegisterStartReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        emailLinkRegisterStart: async (emailLinkRegisterStartReq: EmailLinkRegisterStartReq, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'emailLinkRegisterStartReq' is not null or undefined
            assertParamExists('emailLinkRegisterStart', 'emailLinkRegisterStartReq', emailLinkRegisterStartReq)
            const localVarPath = `/v1/users/emaillinks/register/start`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication projectID required
            await setApiKeyToObject(localVarHeaderParameter, "X-Corbado-ProjectID", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(emailLinkRegisterStartReq, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Performs email link login status check
         * @param {EmailLinkStatusReq} emailLinkStatusReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        emailLinkStatus: async (emailLinkStatusReq: EmailLinkStatusReq, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'emailLinkStatusReq' is not null or undefined
            assertParamExists('emailLinkStatus', 'emailLinkStatusReq', emailLinkStatusReq)
            const localVarPath = `/v1/users/emaillinks/status`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication projectID required
            await setApiKeyToObject(localVarHeaderParameter, "X-Corbado-ProjectID", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(emailLinkStatusReq, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Performs login for given token
         * @param {LoginTokenReq} loginTokenReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loginToken: async (loginTokenReq: LoginTokenReq, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'loginTokenReq' is not null or undefined
            assertParamExists('loginToken', 'loginTokenReq', loginTokenReq)
            const localVarPath = `/v1/users/logintoken`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication projectID required
            await setApiKeyToObject(localVarHeaderParameter, "X-Corbado-ProjectID", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(loginTokenReq, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Performs passkey append finish
         * @param {PassKeyFinishReq} passKeyFinishReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        passKeyAppendFinish: async (passKeyFinishReq: PassKeyFinishReq, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'passKeyFinishReq' is not null or undefined
            assertParamExists('passKeyAppendFinish', 'passKeyFinishReq', passKeyFinishReq)
            const localVarPath = `/v1/users/passkey/append/finish`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication projectID required
            await setApiKeyToObject(localVarHeaderParameter, "X-Corbado-ProjectID", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(passKeyFinishReq, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Performs passkey append start
         * @param {EmptyReq} emptyReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        passKeyAppendStart: async (emptyReq: EmptyReq, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'emptyReq' is not null or undefined
            assertParamExists('passKeyAppendStart', 'emptyReq', emptyReq)
            const localVarPath = `/v1/users/passkey/append/start`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication projectID required
            await setApiKeyToObject(localVarHeaderParameter, "X-Corbado-ProjectID", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(emptyReq, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Performs passkey associate start
         * @param {PassKeyAssociateStartReq} passKeyAssociateStartReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        passKeyAssociateStart: async (passKeyAssociateStartReq: PassKeyAssociateStartReq, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'passKeyAssociateStartReq' is not null or undefined
            assertParamExists('passKeyAssociateStart', 'passKeyAssociateStartReq', passKeyAssociateStartReq)
            const localVarPath = `/v1/users/passkey/associate/start`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication projectID required
            await setApiKeyToObject(localVarHeaderParameter, "X-Corbado-ProjectID", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(passKeyAssociateStartReq, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Checks if active passkey credential exists for provided user and device
         * @param {PassKeyCredentialExistsReq} passKeyCredentialExistsReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        passKeyCredentialExists: async (passKeyCredentialExistsReq: PassKeyCredentialExistsReq, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'passKeyCredentialExistsReq' is not null or undefined
            assertParamExists('passKeyCredentialExists', 'passKeyCredentialExistsReq', passKeyCredentialExistsReq)
            const localVarPath = `/v1/users/device/passkey`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication projectID required
            await setApiKeyToObject(localVarHeaderParameter, "X-Corbado-ProjectID", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(passKeyCredentialExistsReq, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Performs passkey login finish
         * @param {PassKeyFinishReq} passKeyFinishReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        passKeyLoginFinish: async (passKeyFinishReq: PassKeyFinishReq, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'passKeyFinishReq' is not null or undefined
            assertParamExists('passKeyLoginFinish', 'passKeyFinishReq', passKeyFinishReq)
            const localVarPath = `/v1/users/passkey/login/finish`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication projectID required
            await setApiKeyToObject(localVarHeaderParameter, "X-Corbado-ProjectID", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(passKeyFinishReq, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Performs passkey login start
         * @param {PassKeyLoginStartReq} passKeyLoginStartReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        passKeyLoginStart: async (passKeyLoginStartReq: PassKeyLoginStartReq, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'passKeyLoginStartReq' is not null or undefined
            assertParamExists('passKeyLoginStart', 'passKeyLoginStartReq', passKeyLoginStartReq)
            const localVarPath = `/v1/users/passkey/login/start`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication projectID required
            await setApiKeyToObject(localVarHeaderParameter, "X-Corbado-ProjectID", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(passKeyLoginStartReq, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Performs passkey mediation start
         * @param {PassKeyMediationStartReq} passKeyMediationStartReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        passKeyMediationStart: async (passKeyMediationStartReq: PassKeyMediationStartReq, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'passKeyMediationStartReq' is not null or undefined
            assertParamExists('passKeyMediationStart', 'passKeyMediationStartReq', passKeyMediationStartReq)
            const localVarPath = `/v1/users/passkey/mediation/start`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication projectID required
            await setApiKeyToObject(localVarHeaderParameter, "X-Corbado-ProjectID", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(passKeyMediationStartReq, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Performs passkey register finish
         * @param {PassKeyFinishReq} passKeyFinishReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        passKeyRegisterFinish: async (passKeyFinishReq: PassKeyFinishReq, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'passKeyFinishReq' is not null or undefined
            assertParamExists('passKeyRegisterFinish', 'passKeyFinishReq', passKeyFinishReq)
            const localVarPath = `/v1/users/passkey/register/finish`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication projectID required
            await setApiKeyToObject(localVarHeaderParameter, "X-Corbado-ProjectID", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(passKeyFinishReq, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Performs passkey register start
         * @param {PassKeyRegisterStartReq} passKeyRegisterStartReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        passKeyRegisterStart: async (passKeyRegisterStartReq: PassKeyRegisterStartReq, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'passKeyRegisterStartReq' is not null or undefined
            assertParamExists('passKeyRegisterStart', 'passKeyRegisterStartReq', passKeyRegisterStartReq)
            const localVarPath = `/v1/users/passkey/register/start`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication projectID required
            await setApiKeyToObject(localVarHeaderParameter, "X-Corbado-ProjectID", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(passKeyRegisterStartReq, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Performs password verify
         * @param {PasswordVerifyReq} passwordVerifyReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        password: async (passwordVerifyReq: PasswordVerifyReq, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'passwordVerifyReq' is not null or undefined
            assertParamExists('password', 'passwordVerifyReq', passwordVerifyReq)
            const localVarPath = `/v1/users/password/verify`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication projectID required
            await setApiKeyToObject(localVarHeaderParameter, "X-Corbado-ProjectID", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(passwordVerifyReq, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UsersApi - functional programming interface
 * @export
 */
export const UsersApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UsersApiAxiosParamCreator(configuration)
    return {
        /**
         * Lists user\'s available authentication methods
         * @param {AuthMethodsListReq} authMethodsListReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authMethodsList(authMethodsListReq: AuthMethodsListReq, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthMethodsListRsp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authMethodsList(authMethodsListReq, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Gets current user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async currentUserGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MeRsp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.currentUserGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Delete current user\'s passkeys
         * @param {string} credentialID Credential ID from passkeys
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async currentUserPassKeyDelete(credentialID: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GenericRsp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.currentUserPassKeyDelete(credentialID, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Gets current user\'s passkeys
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async currentUserPassKeyGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MePassKeyRsp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.currentUserPassKeyGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Performs email OTP register confirm
         * @param {EmailCodeConfirmReq} emailCodeConfirmReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async emailCodeConfirm(emailCodeConfirmReq: EmailCodeConfirmReq, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EmailCodeConfirmRsp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.emailCodeConfirm(emailCodeConfirmReq, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Performs email OTP login start
         * @param {EmailCodeLoginStartReq} emailCodeLoginStartReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async emailCodeLoginStart(emailCodeLoginStartReq: EmailCodeLoginStartReq, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EmailCodeLoginStartRsp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.emailCodeLoginStart(emailCodeLoginStartReq, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Performs email OTP register start
         * @param {EmailCodeRegisterStartReq} emailCodeRegisterStartReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async emailCodeRegisterStart(emailCodeRegisterStartReq: EmailCodeRegisterStartReq, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EmailCodeRegisterStartRsp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.emailCodeRegisterStart(emailCodeRegisterStartReq, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Performs email OTP login status check
         * @param {EmailCodeStatusReq} emailCodeStatusReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async emailCodeStatus(emailCodeStatusReq: EmailCodeStatusReq, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EmailCodeStatusRsp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.emailCodeStatus(emailCodeStatusReq, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Performs email link register confirm
         * @param {EmailLinkConfirmReq} emailLinkConfirmReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async emailLinkConfirm(emailLinkConfirmReq: EmailLinkConfirmReq, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EmailLinkConfirmRsp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.emailLinkConfirm(emailLinkConfirmReq, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Performs email link login start
         * @param {EmailLinkLoginStartReq} emailLinkLoginStartReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async emailLinkLoginStart(emailLinkLoginStartReq: EmailLinkLoginStartReq, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EmailLinkLoginStartRsp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.emailLinkLoginStart(emailLinkLoginStartReq, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Performs email link register start
         * @param {EmailLinkRegisterStartReq} emailLinkRegisterStartReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async emailLinkRegisterStart(emailLinkRegisterStartReq: EmailLinkRegisterStartReq, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EmailLinkRegisterStartRsp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.emailLinkRegisterStart(emailLinkRegisterStartReq, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Performs email link login status check
         * @param {EmailLinkStatusReq} emailLinkStatusReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async emailLinkStatus(emailLinkStatusReq: EmailLinkStatusReq, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EmailLinkStatusRsp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.emailLinkStatus(emailLinkStatusReq, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Performs login for given token
         * @param {LoginTokenReq} loginTokenReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async loginToken(loginTokenReq: LoginTokenReq, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoginTokenRsp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.loginToken(loginTokenReq, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Performs passkey append finish
         * @param {PassKeyFinishReq} passKeyFinishReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async passKeyAppendFinish(passKeyFinishReq: PassKeyFinishReq, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PassKeyAppendFinishRsp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.passKeyAppendFinish(passKeyFinishReq, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Performs passkey append start
         * @param {EmptyReq} emptyReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async passKeyAppendStart(emptyReq: EmptyReq, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PassKeyStartRsp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.passKeyAppendStart(emptyReq, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Performs passkey associate start
         * @param {PassKeyAssociateStartReq} passKeyAssociateStartReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async passKeyAssociateStart(passKeyAssociateStartReq: PassKeyAssociateStartReq, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PassKeyStartRsp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.passKeyAssociateStart(passKeyAssociateStartReq, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Checks if active passkey credential exists for provided user and device
         * @param {PassKeyCredentialExistsReq} passKeyCredentialExistsReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async passKeyCredentialExists(passKeyCredentialExistsReq: PassKeyCredentialExistsReq, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PassKeyCredentialExistsRsp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.passKeyCredentialExists(passKeyCredentialExistsReq, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Performs passkey login finish
         * @param {PassKeyFinishReq} passKeyFinishReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async passKeyLoginFinish(passKeyFinishReq: PassKeyFinishReq, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PassKeyLoginFinishRsp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.passKeyLoginFinish(passKeyFinishReq, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Performs passkey login start
         * @param {PassKeyLoginStartReq} passKeyLoginStartReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async passKeyLoginStart(passKeyLoginStartReq: PassKeyLoginStartReq, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PassKeyStartRsp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.passKeyLoginStart(passKeyLoginStartReq, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Performs passkey mediation start
         * @param {PassKeyMediationStartReq} passKeyMediationStartReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async passKeyMediationStart(passKeyMediationStartReq: PassKeyMediationStartReq, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PassKeyMediationStartRsp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.passKeyMediationStart(passKeyMediationStartReq, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Performs passkey register finish
         * @param {PassKeyFinishReq} passKeyFinishReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async passKeyRegisterFinish(passKeyFinishReq: PassKeyFinishReq, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PassKeyRegisterFinishRsp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.passKeyRegisterFinish(passKeyFinishReq, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Performs passkey register start
         * @param {PassKeyRegisterStartReq} passKeyRegisterStartReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async passKeyRegisterStart(passKeyRegisterStartReq: PassKeyRegisterStartReq, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PassKeyStartRsp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.passKeyRegisterStart(passKeyRegisterStartReq, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Performs password verify
         * @param {PasswordVerifyReq} passwordVerifyReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async password(passwordVerifyReq: PasswordVerifyReq, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PasswordVerifyRsp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.password(passwordVerifyReq, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * UsersApi - factory interface
 * @export
 */
export const UsersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UsersApiFp(configuration)
    return {
        /**
         * Lists user\'s available authentication methods
         * @param {AuthMethodsListReq} authMethodsListReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authMethodsList(authMethodsListReq: AuthMethodsListReq, options?: any): AxiosPromise<AuthMethodsListRsp> {
            return localVarFp.authMethodsList(authMethodsListReq, options).then((request) => request(axios, basePath));
        },
        /**
         * Gets current user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        currentUserGet(options?: any): AxiosPromise<MeRsp> {
            return localVarFp.currentUserGet(options).then((request) => request(axios, basePath));
        },
        /**
         * Delete current user\'s passkeys
         * @param {string} credentialID Credential ID from passkeys
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        currentUserPassKeyDelete(credentialID: string, options?: any): AxiosPromise<GenericRsp> {
            return localVarFp.currentUserPassKeyDelete(credentialID, options).then((request) => request(axios, basePath));
        },
        /**
         * Gets current user\'s passkeys
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        currentUserPassKeyGet(options?: any): AxiosPromise<MePassKeyRsp> {
            return localVarFp.currentUserPassKeyGet(options).then((request) => request(axios, basePath));
        },
        /**
         * Performs email OTP register confirm
         * @param {EmailCodeConfirmReq} emailCodeConfirmReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        emailCodeConfirm(emailCodeConfirmReq: EmailCodeConfirmReq, options?: any): AxiosPromise<EmailCodeConfirmRsp> {
            return localVarFp.emailCodeConfirm(emailCodeConfirmReq, options).then((request) => request(axios, basePath));
        },
        /**
         * Performs email OTP login start
         * @param {EmailCodeLoginStartReq} emailCodeLoginStartReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        emailCodeLoginStart(emailCodeLoginStartReq: EmailCodeLoginStartReq, options?: any): AxiosPromise<EmailCodeLoginStartRsp> {
            return localVarFp.emailCodeLoginStart(emailCodeLoginStartReq, options).then((request) => request(axios, basePath));
        },
        /**
         * Performs email OTP register start
         * @param {EmailCodeRegisterStartReq} emailCodeRegisterStartReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        emailCodeRegisterStart(emailCodeRegisterStartReq: EmailCodeRegisterStartReq, options?: any): AxiosPromise<EmailCodeRegisterStartRsp> {
            return localVarFp.emailCodeRegisterStart(emailCodeRegisterStartReq, options).then((request) => request(axios, basePath));
        },
        /**
         * Performs email OTP login status check
         * @param {EmailCodeStatusReq} emailCodeStatusReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        emailCodeStatus(emailCodeStatusReq: EmailCodeStatusReq, options?: any): AxiosPromise<EmailCodeStatusRsp> {
            return localVarFp.emailCodeStatus(emailCodeStatusReq, options).then((request) => request(axios, basePath));
        },
        /**
         * Performs email link register confirm
         * @param {EmailLinkConfirmReq} emailLinkConfirmReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        emailLinkConfirm(emailLinkConfirmReq: EmailLinkConfirmReq, options?: any): AxiosPromise<EmailLinkConfirmRsp> {
            return localVarFp.emailLinkConfirm(emailLinkConfirmReq, options).then((request) => request(axios, basePath));
        },
        /**
         * Performs email link login start
         * @param {EmailLinkLoginStartReq} emailLinkLoginStartReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        emailLinkLoginStart(emailLinkLoginStartReq: EmailLinkLoginStartReq, options?: any): AxiosPromise<EmailLinkLoginStartRsp> {
            return localVarFp.emailLinkLoginStart(emailLinkLoginStartReq, options).then((request) => request(axios, basePath));
        },
        /**
         * Performs email link register start
         * @param {EmailLinkRegisterStartReq} emailLinkRegisterStartReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        emailLinkRegisterStart(emailLinkRegisterStartReq: EmailLinkRegisterStartReq, options?: any): AxiosPromise<EmailLinkRegisterStartRsp> {
            return localVarFp.emailLinkRegisterStart(emailLinkRegisterStartReq, options).then((request) => request(axios, basePath));
        },
        /**
         * Performs email link login status check
         * @param {EmailLinkStatusReq} emailLinkStatusReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        emailLinkStatus(emailLinkStatusReq: EmailLinkStatusReq, options?: any): AxiosPromise<EmailLinkStatusRsp> {
            return localVarFp.emailLinkStatus(emailLinkStatusReq, options).then((request) => request(axios, basePath));
        },
        /**
         * Performs login for given token
         * @param {LoginTokenReq} loginTokenReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loginToken(loginTokenReq: LoginTokenReq, options?: any): AxiosPromise<LoginTokenRsp> {
            return localVarFp.loginToken(loginTokenReq, options).then((request) => request(axios, basePath));
        },
        /**
         * Performs passkey append finish
         * @param {PassKeyFinishReq} passKeyFinishReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        passKeyAppendFinish(passKeyFinishReq: PassKeyFinishReq, options?: any): AxiosPromise<PassKeyAppendFinishRsp> {
            return localVarFp.passKeyAppendFinish(passKeyFinishReq, options).then((request) => request(axios, basePath));
        },
        /**
         * Performs passkey append start
         * @param {EmptyReq} emptyReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        passKeyAppendStart(emptyReq: EmptyReq, options?: any): AxiosPromise<PassKeyStartRsp> {
            return localVarFp.passKeyAppendStart(emptyReq, options).then((request) => request(axios, basePath));
        },
        /**
         * Performs passkey associate start
         * @param {PassKeyAssociateStartReq} passKeyAssociateStartReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        passKeyAssociateStart(passKeyAssociateStartReq: PassKeyAssociateStartReq, options?: any): AxiosPromise<PassKeyStartRsp> {
            return localVarFp.passKeyAssociateStart(passKeyAssociateStartReq, options).then((request) => request(axios, basePath));
        },
        /**
         * Checks if active passkey credential exists for provided user and device
         * @param {PassKeyCredentialExistsReq} passKeyCredentialExistsReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        passKeyCredentialExists(passKeyCredentialExistsReq: PassKeyCredentialExistsReq, options?: any): AxiosPromise<PassKeyCredentialExistsRsp> {
            return localVarFp.passKeyCredentialExists(passKeyCredentialExistsReq, options).then((request) => request(axios, basePath));
        },
        /**
         * Performs passkey login finish
         * @param {PassKeyFinishReq} passKeyFinishReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        passKeyLoginFinish(passKeyFinishReq: PassKeyFinishReq, options?: any): AxiosPromise<PassKeyLoginFinishRsp> {
            return localVarFp.passKeyLoginFinish(passKeyFinishReq, options).then((request) => request(axios, basePath));
        },
        /**
         * Performs passkey login start
         * @param {PassKeyLoginStartReq} passKeyLoginStartReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        passKeyLoginStart(passKeyLoginStartReq: PassKeyLoginStartReq, options?: any): AxiosPromise<PassKeyStartRsp> {
            return localVarFp.passKeyLoginStart(passKeyLoginStartReq, options).then((request) => request(axios, basePath));
        },
        /**
         * Performs passkey mediation start
         * @param {PassKeyMediationStartReq} passKeyMediationStartReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        passKeyMediationStart(passKeyMediationStartReq: PassKeyMediationStartReq, options?: any): AxiosPromise<PassKeyMediationStartRsp> {
            return localVarFp.passKeyMediationStart(passKeyMediationStartReq, options).then((request) => request(axios, basePath));
        },
        /**
         * Performs passkey register finish
         * @param {PassKeyFinishReq} passKeyFinishReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        passKeyRegisterFinish(passKeyFinishReq: PassKeyFinishReq, options?: any): AxiosPromise<PassKeyRegisterFinishRsp> {
            return localVarFp.passKeyRegisterFinish(passKeyFinishReq, options).then((request) => request(axios, basePath));
        },
        /**
         * Performs passkey register start
         * @param {PassKeyRegisterStartReq} passKeyRegisterStartReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        passKeyRegisterStart(passKeyRegisterStartReq: PassKeyRegisterStartReq, options?: any): AxiosPromise<PassKeyStartRsp> {
            return localVarFp.passKeyRegisterStart(passKeyRegisterStartReq, options).then((request) => request(axios, basePath));
        },
        /**
         * Performs password verify
         * @param {PasswordVerifyReq} passwordVerifyReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        password(passwordVerifyReq: PasswordVerifyReq, options?: any): AxiosPromise<PasswordVerifyRsp> {
            return localVarFp.password(passwordVerifyReq, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UsersApi - object-oriented interface
 * @export
 * @class UsersApi
 * @extends {BaseAPI}
 */
export class UsersApi extends BaseAPI {
    /**
     * Lists user\'s available authentication methods
     * @param {AuthMethodsListReq} authMethodsListReq 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public authMethodsList(authMethodsListReq: AuthMethodsListReq, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).authMethodsList(authMethodsListReq, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Gets current user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public currentUserGet(options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).currentUserGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete current user\'s passkeys
     * @param {string} credentialID Credential ID from passkeys
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public currentUserPassKeyDelete(credentialID: string, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).currentUserPassKeyDelete(credentialID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Gets current user\'s passkeys
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public currentUserPassKeyGet(options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).currentUserPassKeyGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Performs email OTP register confirm
     * @param {EmailCodeConfirmReq} emailCodeConfirmReq 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public emailCodeConfirm(emailCodeConfirmReq: EmailCodeConfirmReq, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).emailCodeConfirm(emailCodeConfirmReq, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Performs email OTP login start
     * @param {EmailCodeLoginStartReq} emailCodeLoginStartReq 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public emailCodeLoginStart(emailCodeLoginStartReq: EmailCodeLoginStartReq, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).emailCodeLoginStart(emailCodeLoginStartReq, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Performs email OTP register start
     * @param {EmailCodeRegisterStartReq} emailCodeRegisterStartReq 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public emailCodeRegisterStart(emailCodeRegisterStartReq: EmailCodeRegisterStartReq, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).emailCodeRegisterStart(emailCodeRegisterStartReq, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Performs email OTP login status check
     * @param {EmailCodeStatusReq} emailCodeStatusReq 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public emailCodeStatus(emailCodeStatusReq: EmailCodeStatusReq, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).emailCodeStatus(emailCodeStatusReq, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Performs email link register confirm
     * @param {EmailLinkConfirmReq} emailLinkConfirmReq 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public emailLinkConfirm(emailLinkConfirmReq: EmailLinkConfirmReq, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).emailLinkConfirm(emailLinkConfirmReq, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Performs email link login start
     * @param {EmailLinkLoginStartReq} emailLinkLoginStartReq 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public emailLinkLoginStart(emailLinkLoginStartReq: EmailLinkLoginStartReq, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).emailLinkLoginStart(emailLinkLoginStartReq, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Performs email link register start
     * @param {EmailLinkRegisterStartReq} emailLinkRegisterStartReq 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public emailLinkRegisterStart(emailLinkRegisterStartReq: EmailLinkRegisterStartReq, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).emailLinkRegisterStart(emailLinkRegisterStartReq, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Performs email link login status check
     * @param {EmailLinkStatusReq} emailLinkStatusReq 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public emailLinkStatus(emailLinkStatusReq: EmailLinkStatusReq, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).emailLinkStatus(emailLinkStatusReq, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Performs login for given token
     * @param {LoginTokenReq} loginTokenReq 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public loginToken(loginTokenReq: LoginTokenReq, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).loginToken(loginTokenReq, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Performs passkey append finish
     * @param {PassKeyFinishReq} passKeyFinishReq 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public passKeyAppendFinish(passKeyFinishReq: PassKeyFinishReq, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).passKeyAppendFinish(passKeyFinishReq, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Performs passkey append start
     * @param {EmptyReq} emptyReq 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public passKeyAppendStart(emptyReq: EmptyReq, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).passKeyAppendStart(emptyReq, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Performs passkey associate start
     * @param {PassKeyAssociateStartReq} passKeyAssociateStartReq 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public passKeyAssociateStart(passKeyAssociateStartReq: PassKeyAssociateStartReq, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).passKeyAssociateStart(passKeyAssociateStartReq, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Checks if active passkey credential exists for provided user and device
     * @param {PassKeyCredentialExistsReq} passKeyCredentialExistsReq 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public passKeyCredentialExists(passKeyCredentialExistsReq: PassKeyCredentialExistsReq, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).passKeyCredentialExists(passKeyCredentialExistsReq, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Performs passkey login finish
     * @param {PassKeyFinishReq} passKeyFinishReq 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public passKeyLoginFinish(passKeyFinishReq: PassKeyFinishReq, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).passKeyLoginFinish(passKeyFinishReq, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Performs passkey login start
     * @param {PassKeyLoginStartReq} passKeyLoginStartReq 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public passKeyLoginStart(passKeyLoginStartReq: PassKeyLoginStartReq, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).passKeyLoginStart(passKeyLoginStartReq, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Performs passkey mediation start
     * @param {PassKeyMediationStartReq} passKeyMediationStartReq 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public passKeyMediationStart(passKeyMediationStartReq: PassKeyMediationStartReq, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).passKeyMediationStart(passKeyMediationStartReq, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Performs passkey register finish
     * @param {PassKeyFinishReq} passKeyFinishReq 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public passKeyRegisterFinish(passKeyFinishReq: PassKeyFinishReq, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).passKeyRegisterFinish(passKeyFinishReq, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Performs passkey register start
     * @param {PassKeyRegisterStartReq} passKeyRegisterStartReq 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public passKeyRegisterStart(passKeyRegisterStartReq: PassKeyRegisterStartReq, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).passKeyRegisterStart(passKeyRegisterStartReq, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Performs password verify
     * @param {PasswordVerifyReq} passwordVerifyReq 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public password(passwordVerifyReq: PasswordVerifyReq, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).password(passwordVerifyReq, options).then((request) => request(this.axios, this.basePath));
    }
}

