import type { SessionUser } from '@corbado/types';
import type { RecoverableError } from '@corbado/web-core';

import type { Block } from './blocks/Block';
import type { PasskeyAppendBlock } from './blocks/PasskeyAppendBlock';
import type { SignupInitBlock } from './blocks/SignupInitBlock';
import type { LoginFlowNames, ScreenNames, SignUpFlowNames } from './constants';

export type FlowTypeText = 'signup' | 'login';

export type VerificationMethods = 'emailLink' | 'emailOtp' | 'smsOtp';

/**
 * Configuration options for the passkey sign-up with email OTP fallback flow.
 */
export interface SignupOptions {
  passkeyAppend: boolean;
  retryPasskeyOnError: boolean;
  verificationMethod: VerificationMethods;
}

/**
 * Configuration options for the passkey login with email OTP fallback flow.
 */
export interface LoginOptions {
  passkeyAppend: boolean;
  retryPasskeyOnError: boolean;
  verificationMethod: VerificationMethods;
}

/**
 * Configuration options for the authentication flows.
 */
export type FlowOptions = SignupOptions | LoginOptions;

/**
 * Union type of all possible flow names for sign-up and login processes.
 */
export type FlowNames = SignUpFlowNames | LoginFlowNames;

/**
 * All state that can be generated by the user within the CorabdoAuth component.
 * This state is used internally by the flowHandler to determine the next step in the authentication flow and to
 * update the UI accordingly.
 */
export type UserState = {
  email?: string;
  fullName?: string;
  emailError?: RecoverableError;
  userNameError?: RecoverableError;
  verificationError?: RecoverableError;
  lastPasskeyRetryTimeStamp?: number;
};

/**
 * Dynamic part of FLowHandlerState that can be updated.
 */
export type FlowHandlerStateUpdate = {
  userState?: UserState;
  user?: SessionUser;
  flowOptions?: Partial<FlowOptions>;
};

export interface FlowHandlerUpdates {
  flowType?: FlowTypeText;
  flowName?: FlowNames;
  screenName?: ScreenNames;
  verificationMethod?: VerificationMethods;
}

export type Blocks = SignupInitBlock | PasskeyAppendBlock;

export type BlockDataSignupInit = {
  fullName: SignUpField | null;
  email: SignUpField | null;
  phone: SignUpField | null;
  userName: SignUpField | null;
  socialLogins: SocialLogin[];
};

export type BlockDataPasskeyAppend = {
  availableFallbacks: PasskeyFallback[];
  canBeSkipped: boolean;
  userHandle: string;
};

export type BlockDataPasskeyAppended = Record<string, never>;

export type BlockDataEmailVerify = {
  email: string;
  translatedError?: string;
  retryNotBefore?: number;
};

export type PasskeyFallback = {
  label: string;
  action: () => void;
};

export type SocialLogin = {
  name: string;
  icon: string;
  url: string;
};

export type SignUpField = {
  value: string;
  translatedError?: string;
};

export type LoginIdentifiers = {
  email?: string;
  phone?: string;
  userName?: string;
};

export type ScreenWithBlock = {
  screen: ScreenNames;
  block: Block<unknown>;
};
