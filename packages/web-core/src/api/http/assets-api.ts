/* tslint:disable */
/* eslint-disable */
/**
 * Corbado Frontend API
 * Overview of all Corbado Frontend API calls to implement passwordless authentication.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@corbado.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { AppleAppSiteAssociationRsp } from '../models';
// @ts-ignore
import { AssetLink } from '../models';
// @ts-ignore
import { ErrorRsp } from '../models';
/**
 * AssetsApi - axios parameter creator
 * @export
 */
export const AssetsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Provides apple app site association
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appleAppSiteAssociation: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/.well-known/apple-app-site-association`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication projectID required
            await setApiKeyToObject(localVarHeaderParameter, "X-Corbado-ProjectID", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Provides asset links for android devices
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        assetLinks: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/.well-known/assetlinks.json`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication projectID required
            await setApiKeyToObject(localVarHeaderParameter, "X-Corbado-ProjectID", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AssetsApi - functional programming interface
 * @export
 */
export const AssetsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AssetsApiAxiosParamCreator(configuration)
    return {
        /**
         * Provides apple app site association
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async appleAppSiteAssociation(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AppleAppSiteAssociationRsp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.appleAppSiteAssociation(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Provides asset links for android devices
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async assetLinks(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<AssetLink>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.assetLinks(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AssetsApi - factory interface
 * @export
 */
export const AssetsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AssetsApiFp(configuration)
    return {
        /**
         * Provides apple app site association
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appleAppSiteAssociation(options?: any): AxiosPromise<AppleAppSiteAssociationRsp> {
            return localVarFp.appleAppSiteAssociation(options).then((request) => request(axios, basePath));
        },
        /**
         * Provides asset links for android devices
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        assetLinks(options?: any): AxiosPromise<Array<AssetLink>> {
            return localVarFp.assetLinks(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AssetsApi - object-oriented interface
 * @export
 * @class AssetsApi
 * @extends {BaseAPI}
 */
export class AssetsApi extends BaseAPI {
    /**
     * Provides apple app site association
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssetsApi
     */
    public appleAppSiteAssociation(options?: AxiosRequestConfig) {
        return AssetsApiFp(this.configuration).appleAppSiteAssociation(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Provides asset links for android devices
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssetsApi
     */
    public assetLinks(options?: AxiosRequestConfig) {
        return AssetsApiFp(this.configuration).assetLinks(options).then((request) => request(this.axios, this.basePath));
    }
}

