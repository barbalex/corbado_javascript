/* tslint:disable */
/* eslint-disable */
/**
 * Corbado Frontend API
 * Overview of all Corbado Frontend API calls to implement passwordless authentication.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@corbado.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface BlockBody
 */
export interface BlockBody {
    /**
     * 
     * @type {BlockType}
     * @memberof BlockBody
     */
    'block': BlockType;
    /**
     * 
     * @type {BlockBodyData}
     * @memberof BlockBody
     */
    'data': BlockBodyData;
    /**
     * 
     * @type {Array<BlockBody>}
     * @memberof BlockBody
     */
    'alternatives'?: Array<BlockBody>;
    /**
     * 
     * @type {RequestError}
     * @memberof BlockBody
     */
    'error'?: RequestError;
}


/**
 * 
 * @export
 * @interface BlockBodyData
 */
export interface BlockBodyData {
    /**
     * 
     * @type {string}
     * @memberof BlockBodyData
     */
    'challenge': string;
    /**
     * 
     * @type {VerificationMethod}
     * @memberof BlockBodyData
     */
    'verificationMethod': VerificationMethod;
    /**
     * 
     * @type {string}
     * @memberof BlockBodyData
     */
    'identifier': string;
    /**
     * 
     * @type {number}
     * @memberof BlockBodyData
     */
    'retryNotBefore'?: number;
    /**
     * 
     * @type {RequestError}
     * @memberof BlockBodyData
     */
    'error'?: RequestError;
    /**
     * 
     * @type {Array<object>}
     * @memberof BlockBodyData
     */
    'alternativeVerificationMethods': Array<object>;
    /**
     * Only given when project environment is dev
     * @type {string}
     * @memberof BlockBodyData
     */
    'longSession'?: string;
    /**
     * 
     * @type {string}
     * @memberof BlockBodyData
     */
    'shortSession'?: string;
    /**
     * 
     * @type {Array<LoginIdentifierWithError>}
     * @memberof BlockBodyData
     */
    'identifiers': Array<LoginIdentifierWithError>;
    /**
     * 
     * @type {GeneralBlockSignupInitFullName}
     * @memberof BlockBodyData
     */
    'fullName'?: GeneralBlockSignupInitFullName;
    /**
     * 
     * @type {LoginIdentifierType}
     * @memberof BlockBodyData
     */
    'type': LoginIdentifierType;
}


/**
 * 
 * @export
 * @enum {string}
 */

export const BlockType = {
    SignupInit: 'signup-init',
    PasskeyAppend: 'passkey-append',
    PhoneVerify: 'phone-verify',
    EmailVerify: 'email-verify',
    PasskeyAppended: 'passkey-appended',
    Completed: 'completed',
    SocialVerify: 'social-verify',
    UsernameCollect: 'username-collect',
    PhoneCollect: 'phone-collect'
} as const;

export type BlockType = typeof BlockType[keyof typeof BlockType];


/**
 * 
 * @export
 * @interface EmailVerifyFinishReq
 */
export interface EmailVerifyFinishReq {
    /**
     * 
     * @type {object}
     * @memberof EmailVerifyFinishReq
     */
    'clientInfo': object;
    /**
     * 
     * @type {string}
     * @memberof EmailVerifyFinishReq
     */
    'code': string;
    /**
     * 
     * @type {VerificationMethod}
     * @memberof EmailVerifyFinishReq
     */
    'verificationType': VerificationMethod;
}


/**
 * tbd.
 * @export
 * @interface EmailVerifyStartReq
 */
export interface EmailVerifyStartReq {
    /**
     * 
     * @type {VerificationMethod}
     * @memberof EmailVerifyStartReq
     */
    'verificationType': VerificationMethod;
}


/**
 * 
 * @export
 * @interface GeneralBlockCompleted
 */
export interface GeneralBlockCompleted {
    /**
     * Only given when project environment is dev
     * @type {string}
     * @memberof GeneralBlockCompleted
     */
    'longSession'?: string;
    /**
     * 
     * @type {string}
     * @memberof GeneralBlockCompleted
     */
    'shortSession'?: string;
}
/**
 * 
 * @export
 * @interface GeneralBlockPasskeyAppend
 */
export interface GeneralBlockPasskeyAppend {
    /**
     * 
     * @type {string}
     * @memberof GeneralBlockPasskeyAppend
     */
    'challenge': string;
}
/**
 * 
 * @export
 * @interface GeneralBlockSignupInit
 */
export interface GeneralBlockSignupInit {
    /**
     * 
     * @type {Array<LoginIdentifierWithError>}
     * @memberof GeneralBlockSignupInit
     */
    'identifiers': Array<LoginIdentifierWithError>;
    /**
     * 
     * @type {GeneralBlockSignupInitFullName}
     * @memberof GeneralBlockSignupInit
     */
    'fullName'?: GeneralBlockSignupInitFullName;
}
/**
 * 
 * @export
 * @interface GeneralBlockSignupInitFullName
 */
export interface GeneralBlockSignupInitFullName {
    /**
     * 
     * @type {string}
     * @memberof GeneralBlockSignupInitFullName
     */
    'value': string;
    /**
     * 
     * @type {RequestError}
     * @memberof GeneralBlockSignupInitFullName
     */
    'error'?: RequestError;
}
/**
 * 
 * @export
 * @interface GeneralBlockVerifyIdentifier
 */
export interface GeneralBlockVerifyIdentifier {
    /**
     * 
     * @type {VerificationMethod}
     * @memberof GeneralBlockVerifyIdentifier
     */
    'verificationMethod': VerificationMethod;
    /**
     * 
     * @type {string}
     * @memberof GeneralBlockVerifyIdentifier
     */
    'identifier': string;
    /**
     * 
     * @type {number}
     * @memberof GeneralBlockVerifyIdentifier
     */
    'retryNotBefore'?: number;
    /**
     * 
     * @type {RequestError}
     * @memberof GeneralBlockVerifyIdentifier
     */
    'error'?: RequestError;
    /**
     * 
     * @type {Array<object>}
     * @memberof GeneralBlockVerifyIdentifier
     */
    'alternativeVerificationMethods': Array<object>;
}


/**
 * tbd.
 * @export
 * @interface InitSessionReq
 */
export interface InitSessionReq {
    /**
     * 
     * @type {object}
     * @memberof InitSessionReq
     */
    'clientInfo': object;
}
/**
 * tbd.
 * @export
 * @interface InitSessionRsp
 */
export interface InitSessionRsp {
    /**
     * 
     * @type {string}
     * @memberof InitSessionRsp
     */
    'token': string;
    /**
     * 
     * @type {number}
     * @memberof InitSessionRsp
     */
    'expiresAt': number;
    /**
     * 
     * @type {BlockBody}
     * @memberof InitSessionRsp
     */
    'initialBlock': BlockBody;
}
/**
 * tbd.
 * @export
 * @interface InitSignupReq
 */
export interface InitSignupReq {
    /**
     * 
     * @type {string}
     * @memberof InitSignupReq
     */
    'fullName'?: string;
    /**
     * 
     * @type {Array<LoginIdentifier>}
     * @memberof InitSignupReq
     */
    'identifiers': Array<LoginIdentifier>;
}
/**
 * 
 * @export
 * @interface InitSignupRsp
 */
export interface InitSignupRsp {
    /**
     * 
     * @type {BlockType}
     * @memberof InitSignupRsp
     */
    'block': BlockType;
    /**
     * 
     * @type {BlockBodyData}
     * @memberof InitSignupRsp
     */
    'data': BlockBodyData;
    /**
     * 
     * @type {Array<BlockBody>}
     * @memberof InitSignupRsp
     */
    'alternatives'?: Array<BlockBody>;
    /**
     * 
     * @type {RequestError}
     * @memberof InitSignupRsp
     */
    'error'?: RequestError;
}


/**
 * 
 * @export
 * @enum {string}
 */

export const LoginBlock = {
    VerifyPasskey: 'verify-passkey',
    VerifyIdentifier: 'verify-identifier',
    PasskeyAppend: 'passkey-append',
    Completed: 'completed'
} as const;

export type LoginBlock = typeof LoginBlock[keyof typeof LoginBlock];


/**
 * 
 * @export
 * @interface LoginIdentifier
 */
export interface LoginIdentifier {
    /**
     * 
     * @type {LoginIdentifierType}
     * @memberof LoginIdentifier
     */
    'type': LoginIdentifierType;
    /**
     * 
     * @type {string}
     * @memberof LoginIdentifier
     */
    'identifier': string;
}


/**
 * 
 * @export
 * @interface LoginIdentifierConfig
 */
export interface LoginIdentifierConfig {
    /**
     * 
     * @type {LoginIdentifierType}
     * @memberof LoginIdentifierConfig
     */
    'type': LoginIdentifierType;
    /**
     * 
     * @type {string}
     * @memberof LoginIdentifierConfig
     */
    'enforceVerification': LoginIdentifierConfigEnforceVerificationEnum;
    /**
     * 
     * @type {boolean}
     * @memberof LoginIdentifierConfig
     */
    'useAsLoginIdentifier': boolean;
    /**
     * 
     * @type {object}
     * @memberof LoginIdentifierConfig
     */
    'metadata'?: object;
}

export const LoginIdentifierConfigEnforceVerificationEnum = {
    None: 'none',
    Signup: 'signup',
    BeforePasskeyLogin: 'before-passkey-login'
} as const;

export type LoginIdentifierConfigEnforceVerificationEnum = typeof LoginIdentifierConfigEnforceVerificationEnum[keyof typeof LoginIdentifierConfigEnforceVerificationEnum];

/**
 * 
 * @export
 * @enum {string}
 */

export const LoginIdentifierType = {
    Email: 'email',
    Phone: 'phone',
    Username: 'username'
} as const;

export type LoginIdentifierType = typeof LoginIdentifierType[keyof typeof LoginIdentifierType];


/**
 * 
 * @export
 * @interface LoginIdentifierWithError
 */
export interface LoginIdentifierWithError {
    /**
     * 
     * @type {LoginIdentifierType}
     * @memberof LoginIdentifierWithError
     */
    'type': LoginIdentifierType;
    /**
     * 
     * @type {string}
     * @memberof LoginIdentifierWithError
     */
    'identifier': string;
    /**
     * 
     * @type {RequestError}
     * @memberof LoginIdentifierWithError
     */
    'error'?: RequestError;
}


/**
 * tbd.
 * @export
 * @interface PasskeyAppendFinishReq
 */
export interface PasskeyAppendFinishReq {
    /**
     * 
     * @type {object}
     * @memberof PasskeyAppendFinishReq
     */
    'clientInfo': object;
    /**
     * 
     * @type {string}
     * @memberof PasskeyAppendFinishReq
     */
    'signedChallenge': string;
}
/**
 * tbd.
 * @export
 * @interface PasskeyAppendStartReq
 */
export interface PasskeyAppendStartReq {
    /**
     * 
     * @type {object}
     * @memberof PasskeyAppendStartReq
     */
    'clientInfo': object;
}
/**
 * 
 * @export
 * @interface PhoneCollectReq
 */
export interface PhoneCollectReq {
    /**
     * 
     * @type {object}
     * @memberof PhoneCollectReq
     */
    'clientInfo': object;
    /**
     * 
     * @type {string}
     * @memberof PhoneCollectReq
     */
    'value': string;
}
/**
 * 
 * @export
 * @interface RequestError
 */
export interface RequestError {
    /**
     * 
     * @type {string}
     * @memberof RequestError
     */
    'code': string;
    /**
     * 
     * @type {string}
     * @memberof RequestError
     */
    'message': string;
}
/**
 * 
 * @export
 * @interface SocialVerifyStartReq
 */
export interface SocialVerifyStartReq {
    /**
     * 
     * @type {object}
     * @memberof SocialVerifyStartReq
     */
    'clientInfo': object;
}
/**
 * tbd.
 * @export
 * @interface UpdateComponentConfigReq
 */
export interface UpdateComponentConfigReq {
    /**
     * 
     * @type {Array<LoginIdentifierConfig>}
     * @memberof UpdateComponentConfigReq
     */
    'identifiers': Array<LoginIdentifierConfig>;
}
/**
 * 
 * @export
 * @interface UpdateComponentConfigRsp
 */
export interface UpdateComponentConfigRsp {
    /**
     * 
     * @type {boolean}
     * @memberof UpdateComponentConfigRsp
     */
    'success'?: boolean;
}
/**
 * 
 * @export
 * @interface UsernameCollectReq
 */
export interface UsernameCollectReq {
    /**
     * 
     * @type {object}
     * @memberof UsernameCollectReq
     */
    'clientInfo': object;
    /**
     * 
     * @type {string}
     * @memberof UsernameCollectReq
     */
    'value': string;
}
/**
 * 
 * @export
 * @enum {string}
 */

export const VerificationMethod = {
    EmailLink: 'email-link',
    EmailOtp: 'email-otp',
    SmsOtp: 'sms-otp'
} as const;

export type VerificationMethod = typeof VerificationMethod[keyof typeof VerificationMethod];


/**
 * 
 * @export
 * @interface VerifyIdentifierRsp
 */
export interface VerifyIdentifierRsp {
    /**
     * 
     * @type {object}
     * @memberof VerifyIdentifierRsp
     */
    'primary': object;
    /**
     * 
     * @type {object}
     * @memberof VerifyIdentifierRsp
     */
    'alternatives': object;
}
/**
 * 
 * @export
 * @interface VerifyPasskeyRsp
 */
export interface VerifyPasskeyRsp {
    /**
     * 
     * @type {object}
     * @memberof VerifyPasskeyRsp
     */
    'primary': object;
    /**
     * 
     * @type {object}
     * @memberof VerifyPasskeyRsp
     */
    'alternatives': object;
}

/**
 * AuthApi - axios parameter creator
 * @export
 */
export const AuthApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * tbd
         * @param {PhoneCollectReq} phoneCollectReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        collectPhone: async (phoneCollectReq: PhoneCollectReq, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'phoneCollectReq' is not null or undefined
            assertParamExists('collectPhone', 'phoneCollectReq', phoneCollectReq)
            const localVarPath = `/v2/auth/phone/collect`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication projectID required
            await setApiKeyToObject(localVarHeaderParameter, "X-Corbado-ProjectID", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(phoneCollectReq, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * tbd
         * @param {UsernameCollectReq} usernameCollectReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        collectUsername: async (usernameCollectReq: UsernameCollectReq, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'usernameCollectReq' is not null or undefined
            assertParamExists('collectUsername', 'usernameCollectReq', usernameCollectReq)
            const localVarPath = `/v2/auth/username/collect`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication projectID required
            await setApiKeyToObject(localVarHeaderParameter, "X-Corbado-ProjectID", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(usernameCollectReq, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * tbd
         * @param {EmailVerifyFinishReq} emailVerifyFinishReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        finishEmailVerify: async (emailVerifyFinishReq: EmailVerifyFinishReq, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'emailVerifyFinishReq' is not null or undefined
            assertParamExists('finishEmailVerify', 'emailVerifyFinishReq', emailVerifyFinishReq)
            const localVarPath = `/v2/auth/email/verify/finish`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication projectID required
            await setApiKeyToObject(localVarHeaderParameter, "X-Corbado-ProjectID", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(emailVerifyFinishReq, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * tbd
         * @param {PasskeyAppendFinishReq} passkeyAppendFinishReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        finishPasskeyAppend: async (passkeyAppendFinishReq: PasskeyAppendFinishReq, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'passkeyAppendFinishReq' is not null or undefined
            assertParamExists('finishPasskeyAppend', 'passkeyAppendFinishReq', passkeyAppendFinishReq)
            const localVarPath = `/v2/auth/passkey/append/finish`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication projectID required
            await setApiKeyToObject(localVarHeaderParameter, "X-Corbado-ProjectID", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(passkeyAppendFinishReq, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * tbd
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        finishSocialVerify: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v2/auth/social/verify/finish`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication projectID required
            await setApiKeyToObject(localVarHeaderParameter, "X-Corbado-ProjectID", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * tbd
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSession: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v2/auth/session`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication projectID required
            await setApiKeyToObject(localVarHeaderParameter, "X-Corbado-ProjectID", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * tbd
         * @param {InitSessionReq} initSessionReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        initSession: async (initSessionReq: InitSessionReq, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'initSessionReq' is not null or undefined
            assertParamExists('initSession', 'initSessionReq', initSessionReq)
            const localVarPath = `/v2/auth/session-init`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication projectID required
            await setApiKeyToObject(localVarHeaderParameter, "X-Corbado-ProjectID", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(initSessionReq, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * tbd
         * @param {InitSignupReq} initSignupReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        initSignup: async (initSignupReq: InitSignupReq, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'initSignupReq' is not null or undefined
            assertParamExists('initSignup', 'initSignupReq', initSignupReq)
            const localVarPath = `/v2/auth/signup-init`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication projectID required
            await setApiKeyToObject(localVarHeaderParameter, "X-Corbado-ProjectID", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(initSignupReq, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * tbd
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        skipBlock: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v2/auth/skipBlock`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication projectID required
            await setApiKeyToObject(localVarHeaderParameter, "X-Corbado-ProjectID", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * tbd
         * @param {EmailVerifyStartReq} emailVerifyStartReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        startEmailVerify: async (emailVerifyStartReq: EmailVerifyStartReq, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'emailVerifyStartReq' is not null or undefined
            assertParamExists('startEmailVerify', 'emailVerifyStartReq', emailVerifyStartReq)
            const localVarPath = `/v2/auth/email/verify/start`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication projectID required
            await setApiKeyToObject(localVarHeaderParameter, "X-Corbado-ProjectID", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(emailVerifyStartReq, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * tbd
         * @param {PasskeyAppendStartReq} passkeyAppendStartReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        startPasskeyAppend: async (passkeyAppendStartReq: PasskeyAppendStartReq, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'passkeyAppendStartReq' is not null or undefined
            assertParamExists('startPasskeyAppend', 'passkeyAppendStartReq', passkeyAppendStartReq)
            const localVarPath = `/v2/auth/passkey/append/start`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication projectID required
            await setApiKeyToObject(localVarHeaderParameter, "X-Corbado-ProjectID", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(passkeyAppendStartReq, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * tbd
         * @param {SocialVerifyStartReq} socialVerifyStartReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        startSocialVerify: async (socialVerifyStartReq: SocialVerifyStartReq, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'socialVerifyStartReq' is not null or undefined
            assertParamExists('startSocialVerify', 'socialVerifyStartReq', socialVerifyStartReq)
            const localVarPath = `/v2/auth/social/verify/start`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication projectID required
            await setApiKeyToObject(localVarHeaderParameter, "X-Corbado-ProjectID", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(socialVerifyStartReq, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthApi - functional programming interface
 * @export
 */
export const AuthApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AuthApiAxiosParamCreator(configuration)
    return {
        /**
         * tbd
         * @param {PhoneCollectReq} phoneCollectReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async collectPhone(phoneCollectReq: PhoneCollectReq, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BlockBody>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.collectPhone(phoneCollectReq, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * tbd
         * @param {UsernameCollectReq} usernameCollectReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async collectUsername(usernameCollectReq: UsernameCollectReq, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BlockBody>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.collectUsername(usernameCollectReq, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * tbd
         * @param {EmailVerifyFinishReq} emailVerifyFinishReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async finishEmailVerify(emailVerifyFinishReq: EmailVerifyFinishReq, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BlockBody>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.finishEmailVerify(emailVerifyFinishReq, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * tbd
         * @param {PasskeyAppendFinishReq} passkeyAppendFinishReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async finishPasskeyAppend(passkeyAppendFinishReq: PasskeyAppendFinishReq, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BlockBody>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.finishPasskeyAppend(passkeyAppendFinishReq, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * tbd
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async finishSocialVerify(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BlockBody>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.finishSocialVerify(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * tbd
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSession(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BlockBody>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSession(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * tbd
         * @param {InitSessionReq} initSessionReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async initSession(initSessionReq: InitSessionReq, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InitSessionRsp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.initSession(initSessionReq, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * tbd
         * @param {InitSignupReq} initSignupReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async initSignup(initSignupReq: InitSignupReq, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InitSignupRsp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.initSignup(initSignupReq, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * tbd
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async skipBlock(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BlockBody>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.skipBlock(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * tbd
         * @param {EmailVerifyStartReq} emailVerifyStartReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async startEmailVerify(emailVerifyStartReq: EmailVerifyStartReq, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BlockBody>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.startEmailVerify(emailVerifyStartReq, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * tbd
         * @param {PasskeyAppendStartReq} passkeyAppendStartReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async startPasskeyAppend(passkeyAppendStartReq: PasskeyAppendStartReq, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BlockBody>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.startPasskeyAppend(passkeyAppendStartReq, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * tbd
         * @param {SocialVerifyStartReq} socialVerifyStartReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async startSocialVerify(socialVerifyStartReq: SocialVerifyStartReq, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BlockBody>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.startSocialVerify(socialVerifyStartReq, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AuthApi - factory interface
 * @export
 */
export const AuthApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AuthApiFp(configuration)
    return {
        /**
         * tbd
         * @param {PhoneCollectReq} phoneCollectReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        collectPhone(phoneCollectReq: PhoneCollectReq, options?: any): AxiosPromise<BlockBody> {
            return localVarFp.collectPhone(phoneCollectReq, options).then((request) => request(axios, basePath));
        },
        /**
         * tbd
         * @param {UsernameCollectReq} usernameCollectReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        collectUsername(usernameCollectReq: UsernameCollectReq, options?: any): AxiosPromise<BlockBody> {
            return localVarFp.collectUsername(usernameCollectReq, options).then((request) => request(axios, basePath));
        },
        /**
         * tbd
         * @param {EmailVerifyFinishReq} emailVerifyFinishReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        finishEmailVerify(emailVerifyFinishReq: EmailVerifyFinishReq, options?: any): AxiosPromise<BlockBody> {
            return localVarFp.finishEmailVerify(emailVerifyFinishReq, options).then((request) => request(axios, basePath));
        },
        /**
         * tbd
         * @param {PasskeyAppendFinishReq} passkeyAppendFinishReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        finishPasskeyAppend(passkeyAppendFinishReq: PasskeyAppendFinishReq, options?: any): AxiosPromise<BlockBody> {
            return localVarFp.finishPasskeyAppend(passkeyAppendFinishReq, options).then((request) => request(axios, basePath));
        },
        /**
         * tbd
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        finishSocialVerify(options?: any): AxiosPromise<BlockBody> {
            return localVarFp.finishSocialVerify(options).then((request) => request(axios, basePath));
        },
        /**
         * tbd
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSession(options?: any): AxiosPromise<BlockBody> {
            return localVarFp.getSession(options).then((request) => request(axios, basePath));
        },
        /**
         * tbd
         * @param {InitSessionReq} initSessionReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        initSession(initSessionReq: InitSessionReq, options?: any): AxiosPromise<InitSessionRsp> {
            return localVarFp.initSession(initSessionReq, options).then((request) => request(axios, basePath));
        },
        /**
         * tbd
         * @param {InitSignupReq} initSignupReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        initSignup(initSignupReq: InitSignupReq, options?: any): AxiosPromise<InitSignupRsp> {
            return localVarFp.initSignup(initSignupReq, options).then((request) => request(axios, basePath));
        },
        /**
         * tbd
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        skipBlock(options?: any): AxiosPromise<BlockBody> {
            return localVarFp.skipBlock(options).then((request) => request(axios, basePath));
        },
        /**
         * tbd
         * @param {EmailVerifyStartReq} emailVerifyStartReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        startEmailVerify(emailVerifyStartReq: EmailVerifyStartReq, options?: any): AxiosPromise<BlockBody> {
            return localVarFp.startEmailVerify(emailVerifyStartReq, options).then((request) => request(axios, basePath));
        },
        /**
         * tbd
         * @param {PasskeyAppendStartReq} passkeyAppendStartReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        startPasskeyAppend(passkeyAppendStartReq: PasskeyAppendStartReq, options?: any): AxiosPromise<BlockBody> {
            return localVarFp.startPasskeyAppend(passkeyAppendStartReq, options).then((request) => request(axios, basePath));
        },
        /**
         * tbd
         * @param {SocialVerifyStartReq} socialVerifyStartReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        startSocialVerify(socialVerifyStartReq: SocialVerifyStartReq, options?: any): AxiosPromise<BlockBody> {
            return localVarFp.startSocialVerify(socialVerifyStartReq, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AuthApi - object-oriented interface
 * @export
 * @class AuthApi
 * @extends {BaseAPI}
 */
export class AuthApi extends BaseAPI {
    /**
     * tbd
     * @param {PhoneCollectReq} phoneCollectReq 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public collectPhone(phoneCollectReq: PhoneCollectReq, options?: AxiosRequestConfig) {
        return AuthApiFp(this.configuration).collectPhone(phoneCollectReq, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * tbd
     * @param {UsernameCollectReq} usernameCollectReq 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public collectUsername(usernameCollectReq: UsernameCollectReq, options?: AxiosRequestConfig) {
        return AuthApiFp(this.configuration).collectUsername(usernameCollectReq, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * tbd
     * @param {EmailVerifyFinishReq} emailVerifyFinishReq 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public finishEmailVerify(emailVerifyFinishReq: EmailVerifyFinishReq, options?: AxiosRequestConfig) {
        return AuthApiFp(this.configuration).finishEmailVerify(emailVerifyFinishReq, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * tbd
     * @param {PasskeyAppendFinishReq} passkeyAppendFinishReq 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public finishPasskeyAppend(passkeyAppendFinishReq: PasskeyAppendFinishReq, options?: AxiosRequestConfig) {
        return AuthApiFp(this.configuration).finishPasskeyAppend(passkeyAppendFinishReq, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * tbd
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public finishSocialVerify(options?: AxiosRequestConfig) {
        return AuthApiFp(this.configuration).finishSocialVerify(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * tbd
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public getSession(options?: AxiosRequestConfig) {
        return AuthApiFp(this.configuration).getSession(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * tbd
     * @param {InitSessionReq} initSessionReq 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public initSession(initSessionReq: InitSessionReq, options?: AxiosRequestConfig) {
        return AuthApiFp(this.configuration).initSession(initSessionReq, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * tbd
     * @param {InitSignupReq} initSignupReq 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public initSignup(initSignupReq: InitSignupReq, options?: AxiosRequestConfig) {
        return AuthApiFp(this.configuration).initSignup(initSignupReq, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * tbd
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public skipBlock(options?: AxiosRequestConfig) {
        return AuthApiFp(this.configuration).skipBlock(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * tbd
     * @param {EmailVerifyStartReq} emailVerifyStartReq 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public startEmailVerify(emailVerifyStartReq: EmailVerifyStartReq, options?: AxiosRequestConfig) {
        return AuthApiFp(this.configuration).startEmailVerify(emailVerifyStartReq, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * tbd
     * @param {PasskeyAppendStartReq} passkeyAppendStartReq 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public startPasskeyAppend(passkeyAppendStartReq: PasskeyAppendStartReq, options?: AxiosRequestConfig) {
        return AuthApiFp(this.configuration).startPasskeyAppend(passkeyAppendStartReq, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * tbd
     * @param {SocialVerifyStartReq} socialVerifyStartReq 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public startSocialVerify(socialVerifyStartReq: SocialVerifyStartReq, options?: AxiosRequestConfig) {
        return AuthApiFp(this.configuration).startSocialVerify(socialVerifyStartReq, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * tbd
         * @param {UpdateComponentConfigReq} updateComponentConfigReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateComponentConfig: async (updateComponentConfigReq: UpdateComponentConfigReq, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'updateComponentConfigReq' is not null or undefined
            assertParamExists('updateComponentConfig', 'updateComponentConfigReq', updateComponentConfigReq)
            const localVarPath = `/v2/component-config`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication projectID required
            await setApiKeyToObject(localVarHeaderParameter, "X-Corbado-ProjectID", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateComponentConfigReq, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * tbd
         * @param {UpdateComponentConfigReq} updateComponentConfigReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateComponentConfig(updateComponentConfigReq: UpdateComponentConfigReq, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UpdateComponentConfigRsp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateComponentConfig(updateComponentConfigReq, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * tbd
         * @param {UpdateComponentConfigReq} updateComponentConfigReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateComponentConfig(updateComponentConfigReq: UpdateComponentConfigReq, options?: any): AxiosPromise<UpdateComponentConfigRsp> {
            return localVarFp.updateComponentConfig(updateComponentConfigReq, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * tbd
     * @param {UpdateComponentConfigReq} updateComponentConfigReq 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public updateComponentConfig(updateComponentConfigReq: UpdateComponentConfigReq, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).updateComponentConfig(updateComponentConfigReq, options).then((request) => request(this.axios, this.basePath));
    }
}



